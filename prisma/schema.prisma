generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  movieId   Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime? @map("email_verified")
  image               String?
  password            String?   
  passwordResetToken  String?   @unique 
  passwordResetExpires DateTime? 

  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  watchLists    WatchList[]

  @@map("users")
}


model Movie {
  id            Int       @id @default(autoincrement())
  imageString   String
  title         String
  age           Int
  duration      Float
  overview      String
  release       Int
  videoSource   String?
  category      String
  youtubeString String
  createdAt     DateTime  @default(now())

  comments  Comment[]
  WatchLists WatchList[]
}

model WatchList {
  id     String @id @default(uuid())
  userId String
  movieId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@map("watch_lists")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
